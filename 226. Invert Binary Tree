226. Invert Binary Tree
Easy
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def invertTree(self, root: TreeNode) -> TreeNode:
        if not root:
            return None
        else:
            root.left, root.right = self.invertTree(root.right), self.invertTree(root.left)
        return root
    
   
    def invertTree_stack(self, root):
        
        stack = []
        stack.append(root)
        while stack:
            node = stack.pop(-1)
            if node:
                node.left, node.right = node.right, node.left
                stack.append(node.left)
                stack.append(node.right)
        return root
        
    def invertTree_queue(self, root):
        
        queue = collections.deque()
        queue.append(root)
        while queue:
            node = queue.pop()
            if node: 
                node.left, node.right = node.right, node.left
                queue.append(node.left)
                queue.append(node.right)
        return root
