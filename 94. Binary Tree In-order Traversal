94. Binary Tree Inorder Traversal

# recursively
def inorderTraversal1(self, root):
    res = []
    self.helper(root, res)
    return res
    
def helper(self, root, res):
    if root:
        self.helper(root.left, res)
        res.append(root.val)
        self.helper(root.right, res)
 
# iteratively       
def inorderTraversal(self, root):
    res, stack = [], []
    while True:
        while root:
            stack.append(root)
            root = root.left
        if not stack:
            return res
        node = stack.pop()
        res.append(node.val)
        root = node.right
  
 class Solution:
    def inorderTraversal(self, root):
        res, stack = [], []
        while True:
            if root is not None:
                stack.append(root)
                root = root.left
            else:
                if len(stack)>0:
                    root = stack.pop()
                    res.append(root.val)
                    root = root.right
                else:
                    return res
        return res
                    
