94. Binary Tree Inorder Traversal

# recursively
def inorderTraversal1(self, root):
    res = []
    self.helper(root, res)
    return res
    
def helper(self, root, res):
    if root:
        self.helper(root.left, res)
        res.append(root.val)
        self.helper(root.right, res)
 
# iteratively       
lass Solution:
    def inorderTraversal(self, root):
        res, stack = [], []
        cur = root
        while cur or stack:
          while cur: # travel to each node's left child, till reach the left leaf
            stack.append(cur)
            cur = cur.left
          cur = stack.pop() # this node has no left child
          res.append(cur.val) # so let's append the node value 
          cur = cur.right # visit its right child --> if it has left child ? append left and left.val, otherwise append node.val, then visit right child again... cur = node.right
        return res
